{"version":3,"sources":["Navbar.js","Card.js","MemoryGame.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","onClick","onNewGame","Card","style","showing","backgroundColor","className","CardState","HIDING","SHOWING","MATCHING","generateRabCol","cards","i","r","Math","floor","random","g","b","concat","MemoryGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","id","cardState","shuffle","state","noClick","handleClick","bind","assertThisInitialized","handleNewGame","_this2","mapCardState","idsToChange","newCardState","map","c","includes","objectSpread","foundCard","find","showingCards","filter","ids","length","hidingCards","setState","setTimeout","_this3","card","src_Card_0","key","src_Navbar_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","MemoryGame_MemoryGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e315a3ff.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nconst Navbar = (props) => (\n  <header>\n    <h2><a>Memory Game</a></h2>\n    <nav>\n      <li><a onClick={props.onNewGame}>New Game</a></li>\n    </nav>\n  </header>\n);\n\nNavbar.propTypes = {\n  onNewGame: PropTypes.func.isRequired\n};\n\nexport default Navbar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css'\n\nconst Card = (props) => {\n  let style = {};\n  if (props.showing) {\n    style.backgroundColor = props.backgroundColor;\n  }\n  return (\n    <div\n      onClick={props.onClick}\n      className=\"card-container\"\n      style={style}\n    />\n  );\n};\n\nCard.propTypes = {\n  showing: PropTypes.bool.isRequired,\n  backgroundColor: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Card;","import React, {Component} from 'react';\nimport shuffle from 'shuffle-array';   //used for shuffling array\nimport Navbar from './Navbar';\nimport Card from './Card';\n\n\n// A card can be in 1 of 3 CardStates\n// HIDING - the card is not being shown\n// SHOWING - the card is being shown but does not have a match yet\n// MATCHING - the card is being shown and has a match.\n//            the card should never move from MATCHING to another state during\n//            game play.\nconst CardState = {\n  HIDING: 0,\n  SHOWING: 1,\n  MATCHING: 2\n}\nfunction generateRabCol(cards)\n  {\n    for(let i=0;i<15;i+=2)\n    {\n        let r=Math.floor(Math.random()*256);\n        let g=Math.floor(Math.random()*256);\n        let b=Math.floor(Math.random()*256);\n        let backgroundColor=`rgb(${r},${g},${b})`;\n        cards[i].backgroundColor=backgroundColor;\n        cards[i+1].backgroundColor=backgroundColor\n    }\n    return cards;\n  }\n\nexport default class MemoryGame extends Component {\n  constructor(props) {\n    super(props);\n\n    // The cards that we will use for our state.\n    let cards = [\n      {id: 0, cardState: CardState.HIDING, backgroundColor: 'red'},\n      {id: 1, cardState: CardState.HIDING, backgroundColor: 'red'},\n      {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy'},\n      {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy'},\n      {id: 4, cardState: CardState.HIDING, backgroundColor: 'green'},\n      {id: 5, cardState: CardState.HIDING, backgroundColor: 'green'},\n      {id: 6, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n      {id: 7, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n      {id: 8, cardState: CardState.HIDING, backgroundColor: 'black'},\n      {id: 9, cardState: CardState.HIDING, backgroundColor: 'black'},\n      {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple'},\n      {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple'},\n      {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink'},\n      {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink'},\n      {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightskyblue'},\n      {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightskyblue'}\n    ];\n    \n    cards.backgroundColor=generateRabCol(cards);\n    cards = shuffle(cards);\n    this.state = {cards, noClick: false};\n    \n    this.handleClick = this.handleClick.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this)\n  }\n   handleClick(id) {\n    const mapCardState = (cards, idsToChange, newCardState) => {\n      return cards.map(c => {\n        if (idsToChange.includes(c.id)) {\n          return {\n            ...c,\n            cardState: newCardState\n          };\n        }\n        return c;\n      });\n    }\n\n    const foundCard = this.state.cards.find(c => c.id === id);\n    \n    if (this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n      return;\n    }\n    \n    let noClick = false;\n    \n    let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\n    \n    const showingCards =  cards.filter((c) => c.cardState === CardState.SHOWING);\n    \n    const ids = showingCards.map(c => c.id);\n    \n    if (showingCards.length === 2 &&\n        showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n      cards = mapCardState(cards, ids, CardState.MATCHING);\n    } else if (showingCards.length === 2) {\n      let hidingCards = mapCardState(cards, ids, CardState.HIDING);\n      \n      noClick = true;\n      \n      this.setState({cards, noClick}, () => {\n        setTimeout(() => {\n          // set the state of the cards to HIDING after 1.3 seconds\n          this.setState({cards: hidingCards, noClick: false});\n        }, 1300);\n      });\n      return;\n    }\n    \n    this.setState({cards, noClick});\n  }\n  handleNewGame()\n  {\n        let cards = this.state.cards.map(c => ({\n          ...c,\n          cardState: CardState.HIDING\n        }));\n        cards.backgroundColor=generateRabCol(cards);\n        cards = shuffle(cards);\n        this.setState({cards});\n  }\n  \n   render() {\n    const cards = this.state.cards.map((card) => (\n      <Card\n        key={card.id}\n        showing={card.cardState !== CardState.HIDING}\n        backgroundColor={card.backgroundColor}\n        onClick={() => this.handleClick(card.id)}\n      />\n    ));\n\n    return (\n      <div>\n        <Navbar onNewGame={this.handleNewGame}/>\n        {cards}\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MemoryGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}