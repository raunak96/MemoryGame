{"version":3,"sources":["Navbar.js","Card.js","MemoryGame.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","text","onClick","onNewGame","bb","Card","style","showing","backgroundColor","onSel","className","CardState","HIDING","SHOWING","MATCHING","generateRabCol","cards","i","r","Math","floor","random","g","b","concat","push","id","cardState","MemoryGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","state","noClick","Winner","handleNewGame","bind","assertThisInitialized","_this2","mapCardState","idsToChange","newCardState","map","c","includes","objectSpread","foundCard","find","showingCards","filter","ids","length","hidingCards","setState","setTimeout","crd","_this3","card","src_Card_0","key","handleClick","src_Navbar_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","MemoryGame_MemoryGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.871871ba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nconst Navbar = (props) => (\n  <header>\n    <h2><a>Memory Game</a></h2>\n    <span><h3>{props.text}</h3></span>\n    <nav>\n      <li><a onClick={props.onNewGame}>{props.bb}</a></li>\n    </nav>\n  </header>\n);\n\nNavbar.propTypes = {\n  onNewGame: PropTypes.func.isRequired\n};\n\nexport default Navbar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css'\n\nconst Card = (props) => {\n  let style = {};\n  if (props.showing) {\n    style.backgroundColor = props.backgroundColor;\n  }\n  return (\n    <div\n      onClick={props.onSel}\n      className=\"card-container\"\n      style={style}\n    />\n  );\n};\n\nCard.propTypes = {\n  showing: PropTypes.bool.isRequired,\n  backgroundColor: PropTypes.string.isRequired,\n  onSel: PropTypes.func.isRequired\n};\n\nexport default Card;","import React, {Component} from 'react';\nimport shuffle from 'shuffle-array';   //used for shuffling array\nimport Navbar from './Navbar';\nimport Card from './Card';\n\n\n// A card can be in 1 of 3 CardStates\n// HIDING - the card is not being shown\n// SHOWING - the card is being shown but does not have a match yet\n// MATCHING - the card is being shown and has a match.\n//            the card should never move from MATCHING to another state during\n//            game play.\nconst CardState = {\n  HIDING: 0,\n  SHOWING: 1,\n  MATCHING: 2\n}\nfunction generateRabCol()\n  {\n    let cards=[];\n    for(let i=0;i<8;i++)\n    {\n        let r=Math.floor(Math.random()*256);\n        let g=Math.floor(Math.random()*256);\n        let b=Math.floor(Math.random()*256);\n        let backgroundColor=`rgb(${r},${g},${b})`;\n        cards.push({id:i,cardState:CardState.HIDING,backgroundColor:backgroundColor});\n        cards.push({id:15-i,cardState:CardState.HIDING,backgroundColor:backgroundColor});\n    }\n    return cards;\n  }\n\nexport default class MemoryGame extends Component {\n  constructor(props) {\n    super(props);\n\n    // The cards that we will use for our state.\n    let cards =generateRabCol();\n    cards = shuffle(cards);\n    this.state = {cards:cards, noClick: false,Winner:false};\n    \n    this.handleNewGame = this.handleNewGame.bind(this)\n  }\n   handleClick(id) {\n    const mapCardState = (cards, idsToChange, newCardState) => {\n      return cards.map(c => {\n        if (idsToChange.includes(c.id)) {\n          return {\n            ...c,\n            cardState: newCardState\n          };\n        }\n        return c;\n      });\n    }\n\n    const foundCard = this.state.cards.find(c => c.id === id);\n    \n    if (this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n      return;\n    }\n    \n    let noClick = false;\n    let Winner=false;\n    //CHANGE STATE OF CLICKED CARD TO SHOWING\n    let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);      //function expects id as array\n    \n    const showingCards =  cards.filter((c) => c.cardState === CardState.SHOWING);  //get all cards which are showing(in our case max 2)\n    \n    const ids = showingCards.map(c => c.id);\n    \n    if (showingCards.length === 2 && showingCards[0].backgroundColor === showingCards[1].backgroundColor)\n    {\n      cards = mapCardState(cards, ids, CardState.MATCHING);       //IF 2 SHOWING CARDS MATCH SET CARDSTATE TO MATCHING\n    } \n    else if (showingCards.length === 2) \n    {                                                                 //IF 2 SHOWING CARDS DONT MATCH,SET CARDSTATE TO HIDING AFTER 1.3 sec\n      let hidingCards = mapCardState(cards, ids, CardState.HIDING);\n      \n      noClick = true;                                   //DONT ALLOW CLICK DURING THIS DURATION(this is one of the states along with cards array)\n      \n      this.setState({cards, noClick}, () => {\n        setTimeout(() => {\n          // set the state of the cards to HIDING after 1.3 seconds\n          this.setState({cards: hidingCards, noClick: false});\n        }, 1300);\n      });\n      return;\n    }\n    let matchCard=cards.filter(c=>c.cardState===CardState.MATCHING);\n    if(matchCard.length===16){\n      Winner=true;}\n    this.setState({cards, noClick,Winner});\n  }\n  \n  \n  handleNewGame()\n  {\n        let crd=generateRabCol();\n        crd = shuffle(crd);\n        this.setState({cards:crd,noClick:false,Winner:false});\n  }\n  \n   render() {\n    const cards = this.state.cards.map((card) => (\n      <Card\n        key={card.id}\n        showing={card.cardState !== CardState.HIDING}\n        backgroundColor={card.backgroundColor}\n        onSel={this.handleClick.bind(this,card.id)}\n      />\n    ));\n\n    return (\n      <div>\n        <Navbar onNewGame={this.handleNewGame} text={this.state.Winner?\"You Win!!  Nice Memory You Got\":\"\"} bb={this.state.Winner?\"Play Again?\":\"New Game\"}/>\n        {cards}\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MemoryGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}